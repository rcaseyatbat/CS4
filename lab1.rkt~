#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 29 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 55 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 1201 0 26 3 12 #"#lang racket"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 22 29 1 #"\n"
0 0 17 3 25 #";; Part A:Basic Exercises"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 16 #";; Exercise A.1 "
0 0 22 29 1 #"\n"
0 0 17 3 5 #";; 10"
0 0 22 29 1 #"\n"
0 0 17 3 8 #";; -> 10"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 12 #";; (+ 5 3 4)"
0 0 22 29 1 #"\n"
0 0 17 3 8 #";; -> 12"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 10 #";; (- 9 1)"
0 0 22 29 1 #"\n"
0 0 17 3 7 #";; -> 8"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 10 #";; (/ 6 2)"
0 0 22 29 1 #"\n"
0 0 17 3 7 #";; -> 3"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 23 #";; (+ (* 2 4) (- 4 6)) "
0 0 22 29 1 #"\n"
0 0 17 3 7 #";; -> 6"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 15 #";; (define a 3)"
0 0 22 29 1 #"\n"
0 0 17 3 21 #";; (define b (+ a 1))"
0 0 22 29 1 #"\n"
0 0 17 3 18 #";; (+ a b (* a b))"
0 0 22 29 1 #"\n"
0 0 17 3 8 #";; -> 19"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 11 #";; (= a b) "
0 0 22 29 1 #"\n"
0 0 17 3 8 #";; -> #f"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 34 #";; (if (and (> b a) (< b (* a b)))"
0 0 22 29 1 #"\n"
0 0 17 3 5 #";;  b"
0 0 22 29 1 #"\n"
0 0 17 3 6 #";;  a)"
0 0 22 29 1 #"\n"
0 0 17 3 7 #";; -> 4"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 20 #";; (cond ((= a 4) 6)"
0 0 22 29 1 #"\n"
0 0 17 3 25 #";;    ((= b 4) (+ 6 7 a))"
0 0 22 29 1 #"\n"
0 0 17 3 16 #";;    (else 25))"
0 0 22 29 1 #"\n"
0 0 17 3 8 #";; -> 16"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 25 #";; (+ 2 (if (> b a) b a))"
0 0 22 29 1 #"\n"
0 0 17 3 7 #";; -> 6"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 23 #";; (* (cond ((> a b) a)"
0 0 22 29 1 #"\n"
0 0 17 3 20 #";;       ((< a b) b)"
0 0 22 29 1 #"\n"
0 0 17 3 19 #";;       (else -1))"
0 0 22 29 1 #"\n"
0 0 17 3 11 #";; (+ a 1))"
0 0 22 29 1 #"\n"
0 0 17 3 8 #";; -> 16"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 15 #";; Exercise A.2"
0 0 22 29 1 #"\n"
0 0 17 3 44 #";; the Scheme expression in prefix notation:"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 1 #"/"
0 0 22 3 2 #" ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 2 #" ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 1 #" "
0 0 20 3 3 #"4/5"
0 0 22 3 6 #")))) ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 3 #") ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 20 3 1 #"7"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 17 3 13 #";; -> -37/150"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 15 #";; Exercise A.3"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 29 #"sum-of-squares-of-two-largest"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 2 #" ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 1 #">"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 2 #") "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 2 #" ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 1 #"="
0 0 22 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 3 #") ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 1 #">"
0 0 22 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 2 #") "
0 0 14 3 1 #"y"
0 0 22 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 3 #") ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 1 #">"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 2 #") "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"  ( "
0 0 14 3 1 #"+"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 3 #") ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 14 #";;Exercise A.4"
0 0 22 29 1 #"\n"
0 0 17 3 28 #";;(define (a-plus-abs-b a b)"
0 0 22 29 1 #"\n"
0 0 17 3 26 #";; ((if (> b 0) + -) a b))"
0 0 22 29 1 #"\n"
0 0 17 3 74
(
 #";; This code takes 2 arguments, a and b.  It goes to the if statemen"
 #"t, and"
) 0 0 22 29 1 #"\n"
0 0 17 3 76
(
 #";; adds a and b if b is positive, and subtracts b from a if b is neg"
 #"ative.  "
) 0 0 22 29 1 #"\n"
0 0 17 3 71
(
 #";; (so we have a-b if b is negative). Essentially, what it is doing "
 #"is "
) 0 0 22 29 1 #"\n"
0 0 17 3 47 #";; taking a and adding the absolute value of b."
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 20 #";; Part B:Evaluation"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 15 #";; Exercise B.1"
0 0 22 29 1 #"\n"
0 0 17 3 77
(
 #";; With applicative-order evaluation, the result of (test 0 (p)) sho"
 #"uld be 0."
) 0 0 22 29 1 #"\n"
0 0 17 3 78
(
 #";; The interpreter should check if x is equal to 0, and since it is,"
 #" it should"
) 0 0 22 29 1 #"\n"
0 0 17 3 83
(
 #";; evaluate the true case expression of the if statement and return "
 #"0, without ever"
) 0 0 22 29 1 #"\n"
0 0 17 3 87
(
 #";; having to look at the false case expression.  However, using norm"
 #"al-order evaluation"
) 0 0 22 29 1 #"\n"
0 0 17 3 89
(
 #";; will result in an error or an infinite loop, since it will try to"
 #" evaluate all of the "
) 0 0 22 29 1 #"\n"
0 0 17 3 86
(
 #";; operands first, so it must try to evaluate the y argument which i"
 #"s (p), but (p) is "
) 0 0 22 29 1 #"\n"
0 0 17 3 89
(
 #";; not correctly defined and is an \"illegitiment\" value, so the in"
 #"terpreter will be stuck"
) 0 0 22 29 1 #"\n"
0 0 17 3 88
(
 #";; trying to figure out what it is. The function (p) takes no argume"
 #"nts and just returns"
) 0 0 22 29 1 #"\n"
0 0 17 3 91
(
 #";; itself, so it is stuck forever trying to return itself, only to c"
 #"all itself again, so it"
) 0 0 22 29 1 #"\n"
0 0 17 3 42 #";; can never get out of the function call."
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 15 #";; Exercise B.2"
0 0 22 29 1 #"\n"
0 0 17 3 91
(
 #";; When Alyssa attempts to use new-if to calculate square roots, her"
 #" program gets stuck in "
) 0 0 22 29 1 #"\n"
0 0 17 3 87
(
 #";; and infinite loop.  If she used a regular \"if\" statement, and t"
 #"he predicate boolean "
) 0 0 22 29 1 #"\n"
0 0 17 3 88
(
 #";; expression was true, then she could just evaluate the true-case e"
 #"xpression and return"
) 0 0 22 29 1 #"\n"
0 0 17 3 97
(
 #";; the first guess that was good enough.  However, by defining her o"
 #"wn new-if with conditionals, "
) 0 0 22 29 1 #"\n"
0 0 17 3 97
(
 #";; she must evaluate both the true-case and false-case expressions, "
 #"since they are all arguements"
) 0 0 22 29 1 #"\n"
0 0 17 3 98
(
 #";; to the new-if.  This poses a problem, because even when we are \""
 #"close enough\" we still have to "
) 0 0 22 29 1 #"\n"
0 0 17 3 100
(
 #";; evaluate the false case expression which recursively calls sqrt-i"
 #"ter, which then has to evaluate "
) 0 0 22 29 1 #"\n"
0 0 17 3 100
(
 #";; the false-case expression again by making anotehr recursive call."
 #"  There is no end to evaluating "
) 0 0 22 29 1 #"\n"
0 0 17 3 100
(
 #";; the false-case expressions, so the program will get stuck as it t"
 #"ries to evaluate the false-case "
) 0 0 22 29 1 #"\n"
0 0 17 3 73
(
 #";; expression, which is unnecessary if using the built-in \"if\" sta"
 #"tement."
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 15 #";; Exercise B.3"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 12 #";; part (a):"
0 0 22 29 1 #"\n"
0 0 17 3 18 #";; (define (+ a b)"
0 0 22 29 1 #"\n"
0 0 17 3 16 #";;   (if (= a 0)"
0 0 22 29 1 #"\n"
0 0 17 3 10 #";;       b"
0 0 22 29 1 #"\n"
0 0 17 3 30 #";;       (inc (+ (dec a) b))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 20 #";; Evaluate: (+ 2 5)"
0 0 22 29 1 #"\n"
0 0 17 3 20 #";;   evaluate 2 -> 2"
0 0 22 29 1 #"\n"
0 0 17 3 20 #";;   evaluate 5 -> 5"
0 0 22 29 1 #"\n"
0 0 17 3 41 #";;   evaluate + -> (lambda (a b) (if...))"
0 0 22 29 1 #"\n"
0 0 17 3 24 #";;   Apply (lambda (a b)"
0 0 22 29 1 #"\n"
0 0 17 3 24 #";;           (if (= a 0)"
0 0 22 29 1 #"\n"
0 0 17 3 18 #";;               b"
0 0 22 29 1 #"\n"
0 0 17 3 45 #";;               (inc (+ (dec a) b)))) to 2,5"
0 0 22 29 1 #"\n"
0 0 17 3 45 #";;     substitute 2 for a, 5 for b in (if...)"
0 0 22 29 1 #"\n"
0 0 17 3 27 #";;     evaluate (if (= 2 0)"
0 0 22 29 1 #"\n"
0 0 17 3 20 #";;                 5"
0 0 22 29 1 #"\n"
0 0 17 3 40 #";;                 (inc (+ (dec 2) 5))))"
0 0 22 29 1 #"\n"
0 0 17 3 60
#";;        NOTE: Use if expression's special form to evaluate"
0 0 22 29 1 #"\n"
0 0 17 3 26 #";;        evaluate (= 2 0)"
0 0 22 29 1 #"\n"
0 0 17 3 27 #";;          evaluate 2 -> 2"
0 0 22 29 1 #"\n"
0 0 17 3 27 #";;          evaluate 0 -> 0"
0 0 22 29 1 #"\n"
0 0 17 3 27 #";;          evaluate = -> ="
0 0 22 29 1 #"\n"
0 0 17 3 32 #";;          apply = to 2,0 -> #f"
0 0 22 29 1 #"\n"
0 0 17 3 67
#";;        since expression is false, replace with the false clause:"
0 0 22 29 1 #"\n"
0 0 17 3 34 #";;         -> (inc (+ (dec 2) 5)))"
0 0 22 29 1 #"\n"
0 0 17 3 40 #";;        evaluate: (inc (+ (dec 2) 5)))"
0 0 22 29 1 #"\n"
0 0 17 3 35 #";;         evaluate (+ (dec 2) 5)):"
0 0 22 29 1 #"\n"
0 0 17 3 30 #";;           evaluate (dec 2):"
0 0 22 29 1 #"\n"
0 0 17 3 30 #";;             evaluate 2 -> 2"
0 0 22 29 1 #"\n"
0 0 17 3 36 #";;               apply dec to 2 -> 1"
0 0 22 29 1 #"\n"
0 0 17 3 28 #";;           evaluate 5 -> 5"
0 0 22 29 1 #"\n"
0 0 17 3 49 #";;           evaluate + -> (lambda (a b) (if...))"
0 0 22 29 1 #"\n"
0 0 17 3 32 #";;           Apply (lambda (a b)"
0 0 22 29 1 #"\n"
0 0 17 3 32 #";;                   (if (= a 0)"
0 0 22 29 1 #"\n"
0 0 17 3 26 #";;                       b"
0 0 22 29 1 #"\n"
0 0 17 3 53 #";;                       (inc (+ (dec a) b)))) to 1,5"
0 0 22 29 1 #"\n"
0 0 17 3 53 #";;             substitute 1 for a, 5 for b in (if...)"
0 0 22 29 1 #"\n"
0 0 17 3 38 #";;                evaluate (if (= 1 0)"
0 0 22 29 1 #"\n"
0 0 17 3 32 #";;                             5"
0 0 22 29 1 #"\n"
0 0 17 3 52 #";;                             (inc (+ (dec 1) 5))):"
0 0 22 29 1 #"\n"
0 0 17 3 70
(
 #";;                  NOTE: Use if expression's special form to evalua"
 #"te"
) 0 0 22 29 1 #"\n"
0 0 17 3 37 #";;                  evaluate (= 1 0):"
0 0 22 29 1 #"\n"
0 0 17 3 37 #";;                    evaluate 1 -> 1"
0 0 22 29 1 #"\n"
0 0 17 3 37 #";;                    evaluate 0 -> 0"
0 0 22 29 1 #"\n"
0 0 17 3 37 #";;                    evaluate = -> ="
0 0 22 29 1 #"\n"
0 0 17 3 42 #";;                    apply = to 1,0 -> #f"
0 0 22 29 1 #"\n"
0 0 17 3 77
(
 #";;                  Since expression is false, replace with the fals"
 #"e clause:"
) 0 0 22 29 1 #"\n"
0 0 17 3 44 #";;                   -> (inc (+ (dec 1) 5)))"
0 0 22 29 1 #"\n"
0 0 17 3 50 #";;                  evaluate (inc (+ (dec 1) 5))):"
0 0 22 29 1 #"\n"
0 0 17 3 46 #";;                    evaluate (+ (dec 1) 5)):"
0 0 22 29 1 #"\n"
0 0 17 3 41 #";;                      evaluate (dec 1):"
0 0 22 29 1 #"\n"
0 0 17 3 41 #";;                        evaluate 1 -> 1"
0 0 22 29 1 #"\n"
0 0 17 3 45 #";;                        apply dec to 1 -> 0"
0 0 22 29 1 #"\n"
0 0 17 3 39 #";;                      evaluate 5 -> 5"
0 0 22 29 1 #"\n"
0 0 17 3 60
#";;                      evaluate + -> (lambda (a b) (if...))"
0 0 22 29 1 #"\n"
0 0 17 3 43 #";;                      Apply (lambda (a b)"
0 0 22 29 1 #"\n"
0 0 17 3 43 #";;                              (if (= a 0)"
0 0 22 29 1 #"\n"
0 0 17 3 37 #";;                                  b"
0 0 22 29 1 #"\n"
0 0 17 3 63
#";;                                 (inc (+ (dec a) b)))) to 0,5"
0 0 22 29 1 #"\n"
0 0 17 3 65
#";;                        substitute 0 for a, 5 for b in (if...):"
0 0 22 29 1 #"\n"
0 0 17 3 48 #";;                          evaluate (if (= 0 0)"
0 0 22 29 1 #"\n"
0 0 17 3 41 #";;                                      5"
0 0 22 29 1 #"\n"
0 0 17 3 60
#";;                                     (inc (+ (dec 0) 5))):"
0 0 22 29 1 #"\n"
0 0 17 3 80
(
 #";;                            NOTE: Use if expression's special form"
 #" to evaluate"
) 0 0 22 29 1 #"\n"
0 0 17 3 47 #";;                            evaluate (= 0 0):"
0 0 22 29 1 #"\n"
0 0 17 3 47 #";;                              evaluate 0 -> 0"
0 0 22 29 1 #"\n"
0 0 17 3 47 #";;                              evaluate 0 -> 0"
0 0 22 29 1 #"\n"
0 0 17 3 47 #";;                              evaluate = -> ="
0 0 22 29 1 #"\n"
0 0 17 3 52 #";;                              apply = to 0,0 -> #t"
0 0 22 29 1 #"\n"
0 0 17 3 85
(
 #";;                            Since expression is true, replace with"
 #" the true clause:"
) 0 0 22 29 1 #"\n"
0 0 17 3 44 #";;                              result: -> 5"
0 0 22 29 1 #"\n"
0 0 17 3 62
#";;                              so, we have (+ (dec 1) 5) -> 5"
0 0 22 29 1 #"\n"
0 0 17 3 37 #";;                  evaluate (inc 5):"
0 0 22 29 1 #"\n"
0 0 17 3 37 #";;                    evaluate 5 -> 5"
0 0 22 29 1 #"\n"
0 0 17 3 41 #";;                    apply inc to 5 -> 6"
0 0 22 29 1 #"\n"
0 0 17 3 40 #";;        evaluate (inc (+ (dec 2) 5))):"
0 0 22 29 1 #"\n"
0 0 17 3 40 #";;          evaluate (+ (dec 2) 5)) -> 6"
0 0 22 29 1 #"\n"
0 0 17 3 31 #";;          apply inc to 6 -> 7"
0 0 22 29 1 #"\n"
0 0 17 3 40 #";;   Final Result: evaluate (+ 2 5) -> 7"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 12 #";; part (b):"
0 0 22 29 1 #"\n"
0 0 17 3 18 #";; (define (+ a b)"
0 0 22 29 1 #"\n"
0 0 17 3 15 #";;  (if (= a 0)"
0 0 22 29 1 #"\n"
0 0 17 3 9 #";;      b"
0 0 22 29 1 #"\n"
0 0 17 3 29 #";;      (+ (dec a) (inc b))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 20 #";; Evaluate: (+ 2 5)"
0 0 22 29 1 #"\n"
0 0 17 3 20 #";;   evaluate 2 -> 2"
0 0 22 29 1 #"\n"
0 0 17 3 20 #";;   evaluate 5 -> 5"
0 0 22 29 1 #"\n"
0 0 17 3 41 #";;   evaluate + -> (lambda (a b) (if...))"
0 0 22 29 1 #"\n"
0 0 17 3 24 #";;   Apply (lambda (a b)"
0 0 22 29 1 #"\n"
0 0 17 3 24 #";;           (if (= a 0)"
0 0 22 29 1 #"\n"
0 0 17 3 18 #";;               b"
0 0 22 29 1 #"\n"
0 0 17 3 45 #";;               (+ (dec a) (inc b)))) to 2,5"
0 0 22 29 1 #"\n"
0 0 17 3 45 #";;     substitute 2 for a, 5 for b in (if...)"
0 0 22 29 1 #"\n"
0 0 17 3 27 #";;     evaluate (if (= 2 0)"
0 0 22 29 1 #"\n"
0 0 17 3 20 #";;                 5"
0 0 22 29 1 #"\n"
0 0 17 3 40 #";;                 (+ (dec 2) (inc 5))))"
0 0 22 29 1 #"\n"
0 0 17 3 60
#";;        NOTE: Use if expression's special form to evaluate"
0 0 22 29 1 #"\n"
0 0 17 3 26 #";;        evaluate (= 2 0)"
0 0 22 29 1 #"\n"
0 0 17 3 27 #";;          evaluate 2 -> 2"
0 0 22 29 1 #"\n"
0 0 17 3 27 #";;          evaluate 0 -> 0"
0 0 22 29 1 #"\n"
0 0 17 3 27 #";;          evaluate = -> ="
0 0 22 29 1 #"\n"
0 0 17 3 32 #";;          apply = to 2,0 -> #f"
0 0 22 29 1 #"\n"
0 0 17 3 67
#";;        since expression is false, replace with the false clause:"
0 0 22 29 1 #"\n"
0 0 17 3 34 #";;         -> (+ (dec 2) (inc 5)))"
0 0 22 29 1 #"\n"
0 0 17 3 40 #";;        evaluate: (+ (dec 2) (inc 5)))"
0 0 22 29 1 #"\n"
0 0 17 3 30 #";;           evaluate (dec 2):"
0 0 22 29 1 #"\n"
0 0 17 3 30 #";;             evaluate 2 -> 2"
0 0 22 29 1 #"\n"
0 0 17 3 36 #";;               apply dec to 2 -> 1"
0 0 22 29 1 #"\n"
0 0 17 3 30 #";;           evaluate (inc 5):"
0 0 22 29 1 #"\n"
0 0 17 3 30 #";;             evaluate 5 -> 5"
0 0 22 29 1 #"\n"
0 0 17 3 36 #";;               apply inc to 5 -> 6"
0 0 22 29 1 #"\n"
0 0 17 3 49 #";;           evaluate + -> (lambda (a b) (if...))"
0 0 22 29 1 #"\n"
0 0 17 3 32 #";;           Apply (lambda (a b)"
0 0 22 29 1 #"\n"
0 0 17 3 32 #";;                   (if (= a 0)"
0 0 22 29 1 #"\n"
0 0 17 3 26 #";;                       b"
0 0 22 29 1 #"\n"
0 0 17 3 53 #";;                       (+ (dec a) (inc b)))) to 1,6"
0 0 22 29 1 #"\n"
0 0 17 3 53 #";;             substitute 1 for a, 6 for b in (if...)"
0 0 22 29 1 #"\n"
0 0 17 3 38 #";;                evaluate (if (= 1 0)"
0 0 22 29 1 #"\n"
0 0 17 3 32 #";;                             6"
0 0 22 29 1 #"\n"
0 0 17 3 53 #";;                             (+ (dec 1) (inc 6)))):"
0 0 22 29 1 #"\n"
0 0 17 3 70
(
 #";;                  NOTE: Use if expression's special form to evalua"
 #"te"
) 0 0 22 29 1 #"\n"
0 0 17 3 37 #";;                  evaluate (= 1 0):"
0 0 22 29 1 #"\n"
0 0 17 3 37 #";;                    evaluate 1 -> 1"
0 0 22 29 1 #"\n"
0 0 17 3 37 #";;                    evaluate 0 -> 0"
0 0 22 29 1 #"\n"
0 0 17 3 37 #";;                    evaluate = -> ="
0 0 22 29 1 #"\n"
0 0 17 3 42 #";;                    apply = to 1,0 -> #f"
0 0 22 29 1 #"\n"
0 0 17 3 77
(
 #";;                  Since expression is false, replace with the fals"
 #"e clause:"
) 0 0 22 29 1 #"\n"
0 0 17 3 44 #";;                   -> (+ (dec 1) (inc 6)))"
0 0 22 29 1 #"\n"
0 0 17 3 50 #";;                  evaluate (+ (dec 1) (inc 6))):"
0 0 22 29 1 #"\n"
0 0 17 3 51 #";;                    evaluate (+ (dec 1) (inc 6)):"
0 0 22 29 1 #"\n"
0 0 17 3 41 #";;                      evaluate (dec 1):"
0 0 22 29 1 #"\n"
0 0 17 3 41 #";;                        evaluate 1 -> 1"
0 0 22 29 1 #"\n"
0 0 17 3 45 #";;                        apply dec to 1 -> 0"
0 0 22 29 1 #"\n"
0 0 17 3 41 #";;                      evaluate (inc 6):"
0 0 22 29 1 #"\n"
0 0 17 3 41 #";;                        evaluate 6 -> 6"
0 0 22 29 1 #"\n"
0 0 17 3 45 #";;                        apply inc to 6 -> 7"
0 0 22 29 1 #"\n"
0 0 17 3 60
#";;                      evaluate + -> (lambda (a b) (if...))"
0 0 22 29 1 #"\n"
0 0 17 3 43 #";;                      Apply (lambda (a b)"
0 0 22 29 1 #"\n"
0 0 17 3 43 #";;                              (if (= a 0)"
0 0 22 29 1 #"\n"
0 0 17 3 37 #";;                                  b"
0 0 22 29 1 #"\n"
0 0 17 3 62
#";;                                 (+ (dec a) (inc b))) to 0,7"
0 0 22 29 1 #"\n"
0 0 17 3 65
#";;                        substitute 0 for a, 7 for b in (if...):"
0 0 22 29 1 #"\n"
0 0 17 3 48 #";;                          evaluate (if (= 0 0)"
0 0 22 29 1 #"\n"
0 0 17 3 41 #";;                                      7"
0 0 22 29 1 #"\n"
0 0 17 3 60
#";;                                     (+ (dec 0) (inc 7))):"
0 0 22 29 1 #"\n"
0 0 17 3 80
(
 #";;                            NOTE: Use if expression's special form"
 #" to evaluate"
) 0 0 22 29 1 #"\n"
0 0 17 3 47 #";;                            evaluate (= 0 0):"
0 0 22 29 1 #"\n"
0 0 17 3 47 #";;                              evaluate 0 -> 0"
0 0 22 29 1 #"\n"
0 0 17 3 47 #";;                              evaluate 0 -> 0"
0 0 22 29 1 #"\n"
0 0 17 3 47 #";;                              evaluate = -> ="
0 0 22 29 1 #"\n"
0 0 17 3 52 #";;                              apply = to 0,0 -> #t"
0 0 22 29 1 #"\n"
0 0 17 3 85
(
 #";;                            Since expression is true, replace with"
 #" the true clause:"
) 0 0 22 29 1 #"\n"
0 0 17 3 44 #";;                              result: -> 7"
0 0 22 29 1 #"\n"
0 0 17 3 67
#";;                              so, we have (+ (dec 1) (inc 6) -> 7"
0 0 22 29 1 #"\n"
0 0 17 3 55 #";;                    evaluate (+ (dec 1) (inc 6)) -> 7"
0 0 22 29 1 #"\n"
0 0 17 3 44 #";;        evaluate (+ (dec 2) (inc 5))) -> 7"
0 0 22 29 1 #"\n"
0 0 17 3 40 #";;   Final Result: evaluate (+ 2 5) -> 7"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 97
(
 #";; Note that both of these are linear recursive processes.  The prob"
 #"lem grows linear as a grows, "
) 0 0 22 29 1 #"\n"
0 0 17 3 87
(
 #";; and we need to make more recursive calls to the function \"+\".  "
 #"It calls itself until"
) 0 0 22 29 1 #"\n"
0 0 17 3 87
(
 #";; it gets down to the (0,b) case and then works its way back up thr"
 #"ough the recursive "
) 0 0 22 29 1 #"\n"
0 0 17 3 85
(
 #";; calls, of which it must remember all of them.  Thus, it is not co"
 #"nstsant in space;"
) 0 0 22 29 1 #"\n"
0 0 17 3 89
(
 #";; rather in grows linearly in space with a, and is therefore a line"
 #"ar recurisve process."
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 20 #";; Part C: Recursion"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 15 #";; Exercise C.1"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 60
#";; This function computes the factorial of the input number,"
0 0 22 29 1 #"\n"
0 0 17 3 56 #";; which for a number n is equal to n * (n-1) * ... * 1."
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"factorial"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 1 #"="
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 20 3 1 #"1"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 2 #" ("
0 0 14 3 9 #"factorial"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 12 #";; part (a):"
0 0 22 29 1 #"\n"
0 0 17 3 90
(
 #";; This function takes a non-negative interger n and computes the n-"
 #"th term of the series "
) 0 0 22 29 1 #"\n"
0 0 17 3 33 #";; expansion of e, which is 1/n!."
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 6 #"e-term"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 1 #"/"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #" ("
0 0 14 3 9 #"factorial"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 12 #";; part (b):"
0 0 22 29 1 #"\n"
0 0 17 3 83
(
 #";; This function takes a non-negative integer n and computes and app"
 #"roximation to e"
) 0 0 22 29 1 #"\n"
0 0 17 3 87
(
 #";; by computing the sum of n terms of the infinite series expansion "
 #"of e.  The function"
) 0 0 22 29 1 #"\n"
0 0 17 3 75
(
 #";; is recrusive and calls itself until it reaches the base case, whe"
 #"re the "
) 0 0 22 29 1 #"\n"
0 0 17 3 61
#";; approximation of e with one term should be 1/0! = 1/1 = 1."
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 15 #"e-approximation"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 1 #"="
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 20 3 3 #"1.0"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 22 3 2 #" ("
0 0 14 3 6 #"e-term"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 2 #")("
0 0 14 3 15 #"e-approximation"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 12 #";; part (c):"
0 0 22 29 1 #"\n"
0 0 17 3 67
#";; The approximation of e with 100 terms is given by the following:"
0 0 22 29 1 #"\n"
0 0 17 3 45 #";;(e-approximation 100) -> 2.7182818284590455"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 15 #";; Exercise C.2"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 83
(
 #";; These are two mutually recursive functions that call each other b"
 #"y checking for "
) 0 0 22 29 1 #"\n"
0 0 17 3 72
(
 #";; equality with n = 0, and if not, calling the other function with "
 #"n-1."
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 84
(
 #";; This function takes a single non-negative integer n and returns t"
 #"rue if n is even"
) 0 0 22 29 1 #"\n"
0 0 17 3 76
(
 #";; and false otherwise.  It is recursive and makes use of the odd? f"
 #"unction."
) 0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 5 #"even?"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 1 #"="
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 20 3 2 #"#t"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"odd?"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 83
(
 #";; This function takes a single non-negative integer n and returns t"
 #"rue if n is odd"
) 0 0 22 29 1 #"\n"
0 0 17 3 77
(
 #";; and false otherwise.  It is recursive and makes use of the even? "
 #"function."
) 0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 4 #"odd?"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 1 #"="
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 20 3 2 #"#f"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 5 #"even?"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 15 #";; Exercise C.3"
0 0 22 29 1 #"\n"
0 0 17 3 21 #";; part(a) Recursive:"
0 0 22 29 1 #"\n"
0 0 17 3 75
(
 #";; This function takes an integer n and recursive computes the value"
 #" of the"
) 0 0 22 29 1 #"\n"
0 0 17 3 79
(
 #";; function f(n) = f(n-1) + 2*f(n-2) + 3*f(n-3), where f(n) = n for "
 #"n = 0, 1, 2"
) 0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 11 #"f-recursive"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 1 #"<"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 14 3 1 #"n"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 22 3 2 #" ("
0 0 14 3 11 #"f-recursive"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 2 #" ("
0 0 14 3 11 #"f-recursive"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 5 #"))) ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 2 #" ("
0 0 14 3 11 #"f-recursive"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 17 3 21 #";; part(b) Iterative:"
0 0 22 29 1 #"\n"
0 0 17 3 85
(
 #";; This function takes an integer n and iterative computes the value"
 #" for the function"
) 0 0 22 29 1 #"\n"
0 0 17 3 70
(
 #";; f(n) = f(n-1) + 2*f(n-2) + 3*f(n-3), where f(n) = n for n= 0, 1, "
 #"2."
) 0 0 22 29 1 #"\n"
0 0 17 3 60
#";; Uses the helper function (f-helper) with state variables."
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 6 #"f-iter"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 1 #"<"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 20 3 1 #"3"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 8 #"f-helper"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 81
(
 #";; Helper function to reduce f-recursive to an iterative procedure. "
 #" Uses 3 state"
) 0 0 22 29 1 #"\n"
0 0 17 3 77
(
 #";; variables and a counter, since we only need to remember the 3 mos"
 #"t recent "
) 0 0 22 29 1 #"\n"
0 0 17 3 83
(
 #";; caluculations of f(n).  This helps avoid calling f(n) many times "
 #"for the same n."
) 0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 8 #"f-helper"
0 0 22 3 1 #" "
0 0 14 3 2 #"f0"
0 0 22 3 1 #" "
0 0 14 3 2 #"f1"
0 0 22 3 1 #" "
0 0 14 3 2 #"f2"
0 0 22 3 1 #" "
0 0 14 3 7 #"current"
0 0 22 3 1 #" "
0 0 14 3 3 #"max"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 1 #"="
0 0 22 3 1 #" "
0 0 14 3 7 #"current"
0 0 22 3 1 #" "
0 0 14 3 3 #"max"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 14 3 2 #"f0"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 8 #"f-helper"
0 0 22 3 1 #" "
0 0 14 3 2 #"f1"
0 0 22 3 1 #" "
0 0 14 3 2 #"f2"
0 0 22 3 2 #" ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 2 #"f2"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 14 3 2 #"f1"
0 0 22 3 3 #") ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 14 3 2 #"f0"
0 0 22 3 4 #")) ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 7 #"current"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #") "
0 0 14 3 3 #"max"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 15 #";; Exercise C.4"
0 0 22 29 1 #"\n"
0 0 17 3 79
(
 #";; This function takes two integer arguments, row and index.  Row is"
 #" the row of"
) 0 0 22 29 1 #"\n"
0 0 17 3 74
(
 #";; Pascal's triangle, with row 0 corresponding to \"1\", row 1 = \"1"
 #" 1\", etc."
) 0 0 22 29 1 #"\n"
0 0 17 3 80
(
 #";; Index is the position in the corresponding row, starting from lef"
 #"t to right, "
) 0 0 22 29 1 #"\n"
0 0 17 3 78
(
 #";; with the first position corresponding to 0.  If the given (row, i"
 #"ndex) pair"
) 0 0 22 29 1 #"\n"
0 0 17 3 78
(
 #";; is not a valid location in the triangle, -1 will be returned to i"
 #"ndicate a "
) 0 0 22 29 1 #"\n"
0 0 17 3 11 #";; failure."
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 6 #"pascal"
0 0 22 3 1 #" "
0 0 14 3 3 #"row"
0 0 22 3 1 #" "
0 0 14 3 5 #"index"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 22 3 3 #" (("
0 0 14 3 1 #"="
0 0 22 3 1 #" "
0 0 14 3 5 #"index"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #") "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (("
0 0 14 3 1 #"="
0 0 22 3 1 #" "
0 0 14 3 5 #"index"
0 0 22 3 1 #" "
0 0 14 3 3 #"row"
0 0 22 3 2 #") "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (("
0 0 14 3 1 #"<"
0 0 22 3 1 #" "
0 0 14 3 3 #"row"
0 0 22 3 1 #" "
0 0 14 3 5 #"index"
0 0 22 3 2 #") "
0 0 20 3 2 #"-1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 1 #"+"
0 0 22 3 2 #" ("
0 0 14 3 6 #"pascal"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 3 #"row"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #") ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 5 #"index"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 4 #")) ("
0 0 14 3 6 #"pascal"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 3 #"row"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #") "
0 0 14 3 5 #"index"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 15 #";; Exercise C.5"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 8 #"geom-sum"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 1 #"="
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 20 3 1 #"0"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 2 #" ("
0 0 14 3 8 #"geom-sum"
0 0 22 3 2 #" ("
0 0 14 3 1 #"/"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 17 3 80
(
 #";; The problem with Ben Bitdiddle's code is that the base case is ne"
 #"ver reached."
) 0 0 22 29 1 #"\n"
0 0 17 3 77
(
 #";; Technically, the base case is true, but we can never get there be"
 #"cause we "
) 0 0 22 29 1 #"\n"
0 0 17 3 78
(
 #";; are attempting to reduce the problem through division by 2, inste"
 #"ad of the "
) 0 0 22 29 1 #"\n"
0 0 17 3 80
(
 #";; usually subtraction.  If n is not originally 0, n/2 will never ge"
 #"t to 0 since"
) 0 0 22 29 1 #"\n"
0 0 17 3 57 #";; Scheme can handle arbitrally small rational numbers.  "
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 81
(
 #";; The fundamental design flaw is the handling of the base case, whi"
 #"ch eventually"
) 0 0 22 29 1 #"\n"
0 0 17 3 79
(
 #";; must be reached so we can recursively work our back up to the ori"
 #"ginal call."
) 0 0 22 29 1 #"\n"
0 0 17 3 75
(
 #";; But if we can't reach the base case, we'll be stuck in an infinit"
 #"e loop."
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 87
(
 #";; We could implement something like the following instead, which wo"
 #"uld use a tolerance"
) 0 0 22 29 1 #"\n"
0 0 17 3 75
(
 #";; for the base case as opposed to an equality to 0, in which case i"
 #"t would"
) 0 0 22 29 1 #"\n"
0 0 17 3 82
(
 #";; eventually be reached by dividing n by 2, and thus the recursive "
 #"process would "
) 0 0 22 29 1 #"\n"
0 0 17 3 80
(
 #";; work.  Of course, this is just an approximation for the geometric"
 #" series, but"
) 0 0 22 29 1 #"\n"
0 0 17 3 53 #";; we can't really do an infinite sum in finite time."
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"geom-sum2"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 1 #"<"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #" "
0 0 20 3 5 #"0.001"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 20 3 3 #"0.0"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 2 #" ("
0 0 14 3 9 #"geom-sum2"
0 0 22 3 2 #" ("
0 0 14 3 1 #"/"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0           0
