#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 29 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 55 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 3588 0 26 3 12 #"#lang racket"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"require"
0 0 22 3 1 #" "
0 0 14 3 12 #"htdp/testing"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 13 #";; Ryan Casey"
0 0 22 29 1 #"\n"
0 0 17 3 25 #";; csman username: rcasey"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 15 #";; Assignment 5"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 26 #";; Part A: More on quoting"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 15 #";; Exercise A.1"
0 0 22 29 1 #"\n"
0 0 17 3 12 #";; part (a):"
0 0 22 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 3 #"let"
0 0 17 3 3 #" (("
0 0 17 3 1 #"x"
0 0 17 3 1 #" "
0 0 17 3 4 #"2)) "
0 0 22 29 1 #"\n"
0 0 17 3 6 #";;   ("
0 0 17 3 5 #"quote"
0 0 17 3 1 #" "
0 0 17 3 3 #"x))"
0 0 22 29 1 #"\n"
0 0 17 3 9 #";;  -> 'x"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 12 #";; part (b):"
0 0 22 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 3 #"let"
0 0 17 3 3 #" (("
0 0 17 3 1 #"x"
0 0 17 3 1 #" "
0 0 17 3 4 #"5)) "
0 0 22 29 1 #"\n"
0 0 17 3 6 #";;   ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"x"
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 2 #") "
0 0 17 3 1 #"x"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 4 #"cons"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"x"
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 2 #") "
0 0 17 3 4 #"x)))"
0 0 22 29 1 #"\n"
0 0 17 3 33 #";;  -> '((x x) 5 (cons '(x x) x))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 12 #";; part (c):"
0 0 22 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 3 #"let"
0 0 17 3 3 #" (("
0 0 17 3 1 #"y"
0 0 17 3 1 #" "
0 0 17 3 3 #"1) "
0 0 22 29 1 #"\n"
0 0 17 3 10 #";;       ("
0 0 17 3 1 #"z"
0 0 17 3 1 #" "
0 0 17 3 3 #"2) "
0 0 22 29 1 #"\n"
0 0 17 3 10 #";;       ("
0 0 17 3 1 #"x"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"y"
0 0 17 3 1 #" "
0 0 17 3 5 #"z))) "
0 0 22 29 1 #"\n"
0 0 17 3 6 #";;   ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 1 #" "
0 0 17 3 1 #"y"
0 0 17 3 1 #" "
0 0 17 3 3 #"z))"
0 0 22 29 1 #"\n"
0 0 17 3 19 #";;  -> '((y z) 1 2)"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 12 #";; part (d):"
0 0 22 29 1 #"\n"
0 0 17 3 4 #";; ("
0 0 17 3 3 #"let"
0 0 17 3 4 #"  (("
0 0 17 3 1 #"x"
0 0 17 3 1 #" "
0 0 17 3 2 #"1)"
0 0 22 29 1 #"\n"
0 0 17 3 11 #";;        ("
0 0 17 3 1 #"y"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 3 #"3))"
0 0 22 29 1 #"\n"
0 0 17 3 11 #";;        ("
0 0 17 3 1 #"z"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"4"
0 0 17 3 1 #" "
0 0 17 3 1 #"5"
0 0 17 3 1 #" "
0 0 17 3 4 #"6)))"
0 0 22 29 1 #"\n"
0 0 17 3 4 #";;  "
0 0 17 3 1 #"`"
0 0 17 3 1 #"("
0 0 17 3 1 #"x"
0 0 17 3 1 #" "
0 0 17 3 1 #","
0 0 17 3 1 #"x"
0 0 17 3 1 #" "
0 0 17 3 1 #"y"
0 0 17 3 1 #" "
0 0 17 3 1 #","
0 0 17 3 1 #"y"
0 0 17 3 1 #" "
0 0 17 3 2 #",@"
0 0 17 3 1 #"y"
0 0 17 3 1 #" "
0 0 17 3 1 #"z"
0 0 17 3 1 #" "
0 0 17 3 1 #","
0 0 17 3 1 #"z"
0 0 17 3 1 #" "
0 0 17 3 2 #",@"
0 0 17 3 3 #"z))"
0 0 22 29 1 #"\n"
0 0 17 3 41 #";;  -> '(x 1 y (2 3) 2 3 z (4 5 6) 4 5 6)"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 15 #";; Exercise A.1"
0 0 22 29 1 #"\n"
0 0 17 3 12 #";; SICP 2.29"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 46 #";; make-mobile: branch branch -> binary-mobile"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 11 #"make-mobile"
0 0 22 3 1 #" "
0 0 14 3 4 #"left"
0 0 22 3 1 #" "
0 0 14 3 5 #"right"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 14 3 4 #"left"
0 0 22 3 1 #" "
0 0 14 3 5 #"right"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 55 #";; make-branch: int (number or binary-mobile) -> branch"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 11 #"make-branch"
0 0 22 3 1 #" "
0 0 14 3 6 #"length"
0 0 22 3 1 #" "
0 0 14 3 9 #"structure"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 14 3 6 #"length"
0 0 22 3 1 #" "
0 0 14 3 9 #"structure"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 12 #";; part (a):"
0 0 22 29 1 #"\n"
0 0 17 3 39 #";; left-branch: binary-mobile -> branch"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 11 #"left-branch"
0 0 22 3 1 #" "
0 0 14 3 6 #"mobile"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 6 #"mobile"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 40 #";; right-branch: binary-mobile -> branch"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 12 #"right-branch"
0 0 22 3 1 #" "
0 0 14 3 6 #"mobile"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 6 #"mobile"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 31 #";; branch-length: branch -> int"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 13 #"branch-length"
0 0 22 3 1 #" "
0 0 14 3 6 #"branch"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 6 #"branch"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 56 #";; branch-structure: branch -> (number or binary-mobile)"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 16 #"branch-structure"
0 0 22 3 1 #" "
0 0 14 3 6 #"branch"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 6 #"branch"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 12 #";; part (b):"
0 0 22 29 1 #"\n"
0 0 17 3 40 #";; total-weight: binary-mobile -> number"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 12 #"total-weight"
0 0 22 3 1 #" "
0 0 14 3 6 #"mobile"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 1 #"+"
0 0 22 3 2 #" ("
0 0 14 3 13 #"branch-weight"
0 0 22 3 2 #" ("
0 0 14 3 11 #"left-branch"
0 0 22 3 1 #" "
0 0 14 3 6 #"mobile"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 13 #"branch-weight"
0 0 22 3 2 #" ("
0 0 14 3 12 #"right-branch"
0 0 22 3 1 #" "
0 0 14 3 6 #"mobile"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 34 #";; branch-weight: branch -> number"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 13 #"branch-weight"
0 0 22 3 1 #" "
0 0 14 3 6 #"branch"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 22 3 2 #" ("
0 0 14 3 16 #"branch-structure"
0 0 22 3 1 #" "
0 0 14 3 6 #"branch"
0 0 22 3 4 #"))) "
0 0 17 3 32 #";; if number, that is the weight"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 16 #"branch-structure"
0 0 22 3 1 #" "
0 0 14 3 6 #"branch"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 12 #"total-weight"
0 0 22 3 2 #" ("
0 0 14 3 16 #"branch-structure"
0 0 22 3 1 #" "
0 0 14 3 6 #"branch"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 12 #";; part (c):"
0 0 22 29 1 #"\n"
0 0 17 3 34 #";; branch-torgue: branch -> number"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 13 #"branch-torque"
0 0 22 3 1 #" "
0 0 14 3 6 #"branch"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 1 #"*"
0 0 22 3 2 #" ("
0 0 14 3 13 #"branch-length"
0 0 22 3 1 #" "
0 0 14 3 6 #"branch"
0 0 22 3 3 #") ("
0 0 14 3 13 #"branch-weight"
0 0 22 3 1 #" "
0 0 14 3 6 #"branch"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 41 #";; balanced?: binary-mobile -> [#t or #f]"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"balanced?"
0 0 22 3 1 #" "
0 0 14 3 6 #"mobile"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 1 #"="
0 0 22 3 2 #" ("
0 0 14 3 13 #"branch-torque"
0 0 22 3 2 #" ("
0 0 14 3 11 #"left-branch"
0 0 22 3 1 #" "
0 0 14 3 6 #"mobile"
0 0 22 3 3 #")) "
0 0 17 3 31 #";; top braches must be balanced"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 13 #"branch-torque"
0 0 22 3 2 #" ("
0 0 14 3 12 #"right-branch"
0 0 22 3 1 #" "
0 0 14 3 6 #"mobile"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 16 #"branch-balanced?"
0 0 22 3 2 #" ("
0 0 14 3 11 #"left-branch"
0 0 22 3 1 #" "
0 0 14 3 6 #"mobile"
0 0 22 3 3 #")) "
0 0 17 3 28 #";; every sub-branch balanced"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 16 #"branch-balanced?"
0 0 22 3 2 #" ("
0 0 14 3 12 #"right-branch"
0 0 22 3 1 #" "
0 0 14 3 6 #"mobile"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 41 #";; branch-balanced?: branch -> [#t or #f]"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 16 #"branch-balanced?"
0 0 22 3 1 #" "
0 0 14 3 6 #"branch"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 22 3 2 #" ("
0 0 14 3 16 #"branch-structure"
0 0 22 3 1 #" "
0 0 14 3 6 #"branch"
0 0 22 3 3 #")) "
0 0 17 3 39 #";; for a branch to be balanaced, each.."
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 9 #"balanced?"
0 0 22 3 2 #" ("
0 0 14 3 16 #"branch-structure"
0 0 22 3 1 #" "
0 0 14 3 6 #"branch"
0 0 22 3 4 #"))  "
0 0 17 3 32 #";; ..sub-branch must be balanced"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 20 3 2 #"#t"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 12 #";; part (d):"
0 0 22 29 1 #"\n"
0 0 17 3 80
(
 #";; If we changed make-mobile and make-branch to use cons instead of "
 #"branch, very"
) 0 0 22 29 1 #"\n"
0 0 17 3 79
(
 #";; little would need to be changed since we used accessor functions "
 #"in the rest"
) 0 0 22 29 1 #"\n"
0 0 17 3 78
(
 #";; of our code through an abstraction layer.  We would just need to "
 #"update the"
) 0 0 22 29 1 #"\n"
0 0 17 3 22 #";; accessor functions."
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 35 #";; (define (make-mobile left right)"
0 0 22 29 1 #"\n"
0 0 17 3 24 #";;    (cons left right))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 41 #";; (define (make-branch length structure)"
0 0 22 29 1 #"\n"
0 0 17 3 30 #";;    (cons length structure))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 21 #";; CHANGED ACCESSORS:"
0 0 22 29 1 #"\n"
0 0 17 3 41 #";;   left-branch: binary-mobile -> branch"
0 0 22 29 1 #"\n"
0 0 17 3 31 #";; (define (left-branch mobile)"
0 0 22 29 1 #"\n"
0 0 17 3 18 #";;   (car mobile))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 42 #";;   right-branch: binary-mobile -> branch"
0 0 22 29 1 #"\n"
0 0 17 3 32 #";; (define (right-branch mobile)"
0 0 22 29 1 #"\n"
0 0 17 3 80
(
 #";;   (cdr mobile)))    ;; use cdr now since we just have cons rather"
 #" than a list"
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 33 #";;   branch-length: branch -> int"
0 0 22 29 1 #"\n"
0 0 17 3 33 #";; (define (branch-length branch)"
0 0 22 29 1 #"\n"
0 0 17 3 17 #";;  (car branch))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 58
#";;   branch-structure: branch -> (number or binary-mobile)"
0 0 22 29 1 #"\n"
0 0 17 3 36 #";; (define (branch-structure branch)"
0 0 22 29 1 #"\n"
0 0 17 3 80
(
 #";;    (cdr branch)))   ;; use cdr now since we just have cons rather"
 #" than a list"
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 2 #"m0"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 11 #"make-mobile"
0 0 22 3 2 #" ("
0 0 14 3 11 #"make-branch"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #") ("
0 0 14 3 11 #"make-branch"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 2 #"m1"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 11 #"make-mobile"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 11 #"make-branch"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 11 #"make-branch"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 11 #"make-mobile"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 11 #"make-branch"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 11 #"make-branch"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 2 #"m2"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 11 #"make-mobile"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 11 #"make-branch"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 3 #"400"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 11 #"make-branch"
0 0 22 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 11 #"make-mobile"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 11 #"make-branch"
0 0 22 3 1 #" "
0 0 20 3 3 #"100"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 11 #"make-branch"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 3 #"200"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 12 #"total-weight"
0 0 22 3 1 #" "
0 0 14 3 2 #"m0"
0 0 22 3 2 #") "
0 0 20 3 1 #"2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 9 #"balanced?"
0 0 22 3 1 #" "
0 0 14 3 2 #"m0"
0 0 22 3 2 #") "
0 0 20 3 2 #"#t"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 12 #"total-weight"
0 0 22 3 1 #" "
0 0 14 3 2 #"m1"
0 0 22 3 2 #") "
0 0 20 3 1 #"7"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 9 #"balanced?"
0 0 22 3 1 #" "
0 0 14 3 2 #"m1"
0 0 22 3 2 #") "
0 0 20 3 2 #"#t"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 12 #"total-weight"
0 0 22 3 1 #" "
0 0 14 3 2 #"m2"
0 0 22 3 2 #") "
0 0 20 3 3 #"601"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 9 #"balanced?"
0 0 22 3 1 #" "
0 0 14 3 2 #"m2"
0 0 22 3 2 #") "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 15 #";; Exercise A.2"
0 0 22 29 1 #"\n"
0 0 17 3 12 #";; SICP 2.30"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 47 #";; square-tree: tree -> tree-with-nodes-squared"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 11 #"square-tree"
0 0 22 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 15 3 4 #"cond"
0 0 22 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 2 #") "
0 0 14 3 4 #"null"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"         (("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 22 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 22 3 2 #" ("
0 0 14 3 11 #"square-tree"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 4 #")) ("
0 0 14 3 11 #"square-tree"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 48 #";; square-tree2: tree -> tree-with-nodes-squared"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 12 #"square-tree2"
0 0 22 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 8 #"sub-tree"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 22 3 1 #" "
0 0 14 3 8 #"sub-tree"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 11 #"square-tree"
0 0 22 3 1 #" "
0 0 14 3 8 #"sub-tree"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 8 #"sub-tree"
0 0 22 3 2 #") "
0 0 14 3 4 #"null"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 8 #"sub-tree"
0 0 22 3 1 #" "
0 0 14 3 8 #"sub-tree"
0 0 22 3 5 #")))) "
0 0 14 3 4 #"tree"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 3 #"nil"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 6 #"a-tree"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 2 #"20"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 2 #"42"
0 0 22 3 1 #" "
0 0 14 3 3 #"nil"
0 0 22 3 1 #" "
0 0 20 3 2 #"12"
0 0 22 3 2 #") "
0 0 14 3 3 #"nil"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 2 #"13"
0 0 22 3 1 #" "
0 0 14 3 3 #"nil"
0 0 22 3 3 #")) "
0 0 14 3 3 #"nil"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 4 #"))) "
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 11 #"square-tree"
0 0 22 3 1 #" "
0 0 14 3 3 #"nil"
0 0 22 3 2 #") "
0 0 14 3 3 #"nil"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 11 #"square-tree"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 3 #"100"
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 11 #"square-tree"
0 0 22 3 1 #" "
0 0 14 3 6 #"a-tree"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 3 #"100"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 3 #"400"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 4 #"1764"
0 0 22 3 1 #" "
0 0 14 3 3 #"nil"
0 0 22 3 1 #" "
0 0 20 3 3 #"144"
0 0 22 3 2 #") "
0 0 14 3 3 #"nil"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 3 #"169"
0 0 22 3 1 #" "
0 0 14 3 3 #"nil"
0 0 22 3 3 #")) "
0 0 14 3 3 #"nil"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #" "
0 0 20 3 1 #"9"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 17 3 35 #";; tests for second method with map"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 12 #"square-tree2"
0 0 22 3 1 #" "
0 0 14 3 3 #"nil"
0 0 22 3 2 #") "
0 0 14 3 3 #"nil"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 12 #"square-tree2"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 3 #"100"
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 12 #"square-tree2"
0 0 22 3 1 #" "
0 0 14 3 6 #"a-tree"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 3 #"100"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 3 #"400"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 4 #"1764"
0 0 22 3 1 #" "
0 0 14 3 3 #"nil"
0 0 22 3 1 #" "
0 0 20 3 3 #"144"
0 0 22 3 2 #") "
0 0 14 3 3 #"nil"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 3 #"169"
0 0 22 3 1 #" "
0 0 14 3 3 #"nil"
0 0 22 3 3 #")) "
0 0 14 3 3 #"nil"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #" "
0 0 20 3 1 #"9"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 15 #";; Exercise A.3"
0 0 22 29 1 #"\n"
0 0 17 3 12 #";; SICP 2.31"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 63
#";; tree-map: (number -> number) tree -> tree-with-nodes-squared"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 8 #"tree-map"
0 0 22 3 1 #" "
0 0 14 3 4 #"proc"
0 0 22 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 15 3 4 #"cond"
0 0 22 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 2 #") "
0 0 14 3 4 #"null"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"          (("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 22 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 4 #")) ("
0 0 14 3 4 #"proc"
0 0 22 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 22 3 2 #" ("
0 0 14 3 8 #"tree-map"
0 0 22 3 1 #" "
0 0 14 3 4 #"proc"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 4 #")) ("
0 0 14 3 8 #"tree-map"
0 0 22 3 1 #" "
0 0 14 3 4 #"proc"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 21 #";; square: int -> int"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 6 #"square"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 56 #";; square-tree-abstract: tree -> tree-with-nodes-squared"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 20 #"square-tree-abstract"
0 0 22 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 8 #"tree-map"
0 0 22 3 1 #" "
0 0 14 3 6 #"square"
0 0 22 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 20 #"square-tree-abstract"
0 0 22 3 1 #" "
0 0 14 3 3 #"nil"
0 0 22 3 2 #") "
0 0 14 3 3 #"nil"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 20 #"square-tree-abstract"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 3 #"100"
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 20 #"square-tree-abstract"
0 0 22 3 1 #" "
0 0 14 3 6 #"a-tree"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 3 #"100"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 3 #"400"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 4 #"1764"
0 0 22 3 1 #" "
0 0 14 3 3 #"nil"
0 0 22 3 1 #" "
0 0 20 3 3 #"144"
0 0 22 3 2 #") "
0 0 14 3 3 #"nil"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 3 #"169"
0 0 22 3 1 #" "
0 0 14 3 3 #"nil"
0 0 22 3 3 #")) "
0 0 14 3 3 #"nil"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #" "
0 0 20 3 1 #"9"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 15 #";; Exercise A.4"
0 0 22 29 1 #"\n"
0 0 17 3 12 #";; SICP 2.32"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 69
(
 #";; subsets: list -> list-of-all-subsets-of-input-list [including '()"
 #"]"
) 0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 7 #"subsets"
0 0 22 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 14 3 3 #"nil"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 4 #"rest"
0 0 22 3 2 #" ("
0 0 14 3 7 #"subsets"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 6 #"append"
0 0 22 3 1 #" "
0 0 14 3 4 #"rest"
0 0 22 3 2 #" ("
0 0 14 3 3 #"map"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 29 #"                            ("
0 0 14 3 4 #"cons"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 2 #") "
0 0 14 3 1 #"x"
0 0 22 3 3 #")) "
0 0 14 3 4 #"rest"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 80
(
 #";; This function works because we are recursively appending the car "
 #"of s to the "
) 0 0 22 29 1 #"\n"
0 0 17 3 77
(
 #";; subsets of the cdr of s each time through.  The base case is when"
 #" we reach"
) 0 0 22 29 1 #"\n"
0 0 17 3 72
(
 #";; the empty list, in which case add the list () to the list of subs"
 #"ets."
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 7 #"subsets"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 3 #")) "
0 0 20 3 1 #"'"
0 0 22 3 6 #"(())) "
0 0 17 3 47 #"; note: result = list containing the empty list"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 7 #"subsets"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")) "
0 0 20 3 1 #"'"
0 0 22 3 5 #"(() ("
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 7 #"subsets"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 3 #")) "
0 0 20 3 1 #"'"
0 0 22 3 5 #"(() ("
0 0 20 3 1 #"3"
0 0 22 3 3 #") ("
0 0 20 3 1 #"2"
0 0 22 3 3 #") ("
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 3 #") ("
0 0 20 3 1 #"1"
0 0 22 3 3 #") ("
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 3 #") ("
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 3 #") ("
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 15 #";; Exercise A.5"
0 0 22 29 1 #"\n"
0 0 17 3 12 #";; SICP 2.33"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 10 #"accumulate"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 1 #" "
0 0 14 3 7 #"initial"
0 0 22 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 14 3 7 #"initial"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 2 #"op"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 10 #"accumulate"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 1 #" "
0 0 14 3 7 #"initial"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 7 #"new-map"
0 0 22 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 10 #"accumulate"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 22 3 2 #" ("
0 0 14 3 1 #"p"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #") "
0 0 14 3 1 #"y"
0 0 22 3 3 #")) "
0 0 14 3 3 #"nil"
0 0 22 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 10 #"new-append"
0 0 22 3 1 #" "
0 0 14 3 4 #"seq1"
0 0 22 3 1 #" "
0 0 14 3 4 #"seq2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 10 #"accumulate"
0 0 22 3 1 #" "
0 0 14 3 4 #"cons"
0 0 22 3 1 #" "
0 0 14 3 4 #"seq2"
0 0 22 3 1 #" "
0 0 14 3 4 #"seq1"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 10 #"new-length"
0 0 22 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 10 #"accumulate"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 3 #") ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 3 #")) "
0 0 20 3 1 #"0"
0 0 22 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 7 #"new-map"
0 0 22 3 1 #" "
0 0 14 3 6 #"square"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 7 #"new-map"
0 0 22 3 1 #" "
0 0 14 3 6 #"square"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #" "
0 0 20 3 1 #"9"
0 0 22 3 1 #" "
0 0 20 3 2 #"16"
0 0 22 3 1 #" "
0 0 20 3 2 #"25"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 10 #"new-append"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 3 #") ("
0 0 14 3 4 #"list"
0 0 22 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 10 #"new-append"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 3 #") ("
0 0 14 3 4 #"list"
0 0 22 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 10 #"new-append"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 3 #") ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 10 #"new-append"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 3 #") ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 10 #"new-length"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 3 #")) "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 10 #"new-length"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 3 #")) "
0 0 20 3 1 #"5"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 15 #";; Exercise A.6"
0 0 22 29 1 #"\n"
0 0 17 3 12 #";; SICP 2.36"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 12 #"accumulate-n"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 1 #" "
0 0 14 3 4 #"init"
0 0 22 3 1 #" "
0 0 14 3 4 #"seqs"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"seqs"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 14 3 3 #"nil"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 22 3 2 #" ("
0 0 14 3 10 #"accumulate"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 1 #" "
0 0 14 3 4 #"init"
0 0 22 3 2 #" ("
0 0 14 3 3 #"map"
0 0 22 3 1 #" "
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"seqs"
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                  "
0 0 17 3 55 #";; applies accumulate to first element of each sequence"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 12 #"accumulate-n"
0 0 22 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 1 #" "
0 0 14 3 4 #"init"
0 0 22 3 2 #" ("
0 0 14 3 3 #"map"
0 0 22 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"seqs"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                 "
0 0 17 3 41 #";; recursive call to rest of the sequence"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 12 #"accumulate-n"
0 0 22 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 6 #"(())) "
0 0 20 3 1 #"'"
0 0 22 3 3 #"())"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 12 #"accumulate-n"
0 0 22 3 1 #" "
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 2 #"(("
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 3 #") ("
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 1 #" "
0 0 20 3 2 #"24"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 1 #" "
0 0 20 3 2 #"24"
0 0 22 3 1 #" "
0 0 20 3 3 #"120"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 12 #"accumulate-n"
0 0 22 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 2 #"(("
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 3 #") ("
0 0 20 3 1 #"4"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 3 #") ("
0 0 20 3 1 #"7"
0 0 22 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 1 #" "
0 0 20 3 1 #"9"
0 0 22 3 3 #") ("
0 0 20 3 2 #"10"
0 0 22 3 1 #" "
0 0 20 3 2 #"11"
0 0 22 3 1 #" "
0 0 20 3 2 #"12"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 2 #"22"
0 0 22 3 1 #" "
0 0 20 3 2 #"26"
0 0 22 3 1 #" "
0 0 20 3 2 #"30"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 15 #";; Exercise A.7"
0 0 22 29 1 #"\n"
0 0 17 3 12 #";; SICP 2.37"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 11 #"dot-product"
0 0 22 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 1 #" "
0 0 14 3 1 #"w"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 10 #"accumulate"
0 0 22 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #" ("
0 0 14 3 3 #"map"
0 0 22 3 1 #" "
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 1 #" "
0 0 14 3 1 #"w"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 15 #"matrix-*-vector"
0 0 22 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"row"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 11 #"dot-product"
0 0 22 3 1 #" "
0 0 14 3 3 #"row"
0 0 22 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 3 #")) "
0 0 14 3 1 #"m"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"transpose"
0 0 22 3 1 #" "
0 0 14 3 3 #"mat"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 12 #"accumulate-n"
0 0 22 3 1 #" "
0 0 14 3 4 #"cons"
0 0 22 3 1 #" "
0 0 14 3 4 #"null"
0 0 22 3 1 #" "
0 0 14 3 3 #"mat"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 15 #"matrix-*-matrix"
0 0 22 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 7 #"columns"
0 0 22 3 2 #" ("
0 0 14 3 9 #"transpose"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"row"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 15 #"matrix-*-vector"
0 0 22 3 1 #" "
0 0 14 3 7 #"columns"
0 0 22 3 1 #" "
0 0 14 3 3 #"row"
0 0 22 3 3 #")) "
0 0 14 3 1 #"m"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 11 #"dot-product"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 3 #"() "
0 0 20 3 1 #"'"
0 0 22 3 4 #"()) "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 11 #"dot-product"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 1 #"4"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 3 #")) "
0 0 20 3 2 #"32"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 15 #"matrix-*-vector"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 2 #"(("
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #") ("
0 0 20 3 1 #"0"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")) "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 2 #"10"
0 0 22 3 1 #" "
0 0 20 3 2 #"20"
0 0 22 3 3 #")) "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 2 #"10"
0 0 22 3 1 #" "
0 0 20 3 2 #"20"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 15 #"matrix-*-vector"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 2 #"(("
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 3 #") ("
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #")) "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 2 #"-2"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 3 #")) "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 1 #"4"
0 0 22 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 9 #"transpose"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 2 #"(("
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 3 #") ("
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 4 #"))) "
0 0 20 3 1 #"'"
0 0 22 3 2 #"(("
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 3 #") ("
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 9 #"transpose"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 2 #"(("
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 3 #") ("
0 0 20 3 1 #"4"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 4 #"))) "
0 0 20 3 1 #"'"
0 0 22 3 2 #"(("
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #") ("
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 3 #") ("
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 15 #"matrix-*-matrix"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 2 #"(("
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #") ("
0 0 20 3 1 #"0"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")) "
0 0 20 3 1 #"'"
0 0 22 3 2 #"(("
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 3 #") ("
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 4 #"))) "
0 0 20 3 1 #"'"
0 0 22 3 2 #"(("
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 3 #") ("
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 15 #"matrix-*-matrix"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 2 #"(("
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 3 #") ("
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #")) "
0 0 20 3 1 #"'"
0 0 22 3 2 #"(("
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 3 #") ("
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 4 #"))) "
0 0 20 3 1 #"'"
0 0 22 3 2 #"(("
0 0 20 3 1 #"7"
0 0 22 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 3 #") ("
0 0 20 3 2 #"15"
0 0 22 3 1 #" "
0 0 20 3 2 #"22"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 15 #"matrix-*-matrix"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 2 #"(("
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 3 #") ("
0 0 20 3 1 #"4"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 3 #")) "
0 0 20 3 1 #"'"
0 0 22 3 2 #"(("
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 3 #") ("
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #") ("
0 0 20 3 1 #"5"
0 0 22 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 4 #"))) "
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 20 3 1 #"'"
0 0 22 3 2 #"(("
0 0 20 3 2 #"22"
0 0 22 3 1 #" "
0 0 20 3 2 #"28"
0 0 22 3 3 #") ("
0 0 20 3 2 #"49"
0 0 22 3 1 #" "
0 0 20 3 2 #"64"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 46 #";; Part B: Structural and Generative Recursion"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 15 #";; Exercise B.1"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 42 #";; filter: predicate list -> filtered-list"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 22 3 1 #" "
0 0 14 3 9 #"predicate"
0 0 22 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 22 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 22 3 2 #") "
0 0 14 3 3 #"nil"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (("
0 0 14 3 9 #"predicate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 6 #"filter"
0 0 22 3 1 #" "
0 0 14 3 9 #"predicate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 22 3 1 #" "
0 0 14 3 9 #"predicate"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 52 #";; quicksort: list -> list-sorted-in-ascending-order"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"quicksort"
0 0 22 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 22 3 3 #" (("
0 0 14 3 2 #"or"
0 0 22 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 3 #") ("
0 0 14 3 1 #"="
0 0 22 3 2 #" ("
0 0 14 3 6 #"length"
0 0 22 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 2 #") "
0 0 20 3 1 #"1"
0 0 22 3 3 #")) "
0 0 14 3 3 #"lst"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 17 3 55 #";; if the list is empty or of length 1, return the list"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 4 #"else"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 5 #"pivot"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 6 #"append"
0 0 22 3 2 #" ("
0 0 14 3 9 #"quicksort"
0 0 22 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 3 #") ("
0 0 14 3 1 #"<"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 5 #"pivot"
0 0 22 3 3 #")) "
0 0 14 3 3 #"lst"
0 0 22 3 4 #"))  "
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                      "
0 0 17 3 35 #";; get all elements less than pivot"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 6 #"filter"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 3 #") ("
0 0 14 3 1 #"="
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 5 #"pivot"
0 0 22 3 3 #")) "
0 0 14 3 3 #"lst"
0 0 22 3 3 #")  "
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                      "
0 0 17 3 34 #";; get all elements equal to pivot"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 9 #"quicksort"
0 0 22 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 3 #") ("
0 0 14 3 1 #">"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 5 #"pivot"
0 0 22 3 3 #")) "
0 0 14 3 3 #"lst"
0 0 22 3 8 #"))))))) "
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                      "
0 0 17 3 38 #";; get all elements greater than pivot"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 9 #"quicksort"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 4 #"()) "
0 0 20 3 1 #"'"
0 0 22 3 3 #"())"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 9 #"quicksort"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 1 #"1"
0 0 22 3 3 #")) "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 1 #"1"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 9 #"quicksort"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 3 #")) "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 9 #"quicksort"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 1 #"5"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 3 #")) "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 15 #";; Exercise B.2"
0 0 22 29 1 #"\n"
0 0 17 3 74
(
 #";; This implementation of quicksort is an example of generative recu"
 #"rsion "
) 0 0 22 29 1 #"\n"
0 0 17 3 70
(
 #";; because we are not altering the input list to get to the base cas"
 #"e."
) 0 0 22 29 1 #"\n"
0 0 17 3 78
(
 #";; Instead, we are creating a new list that is returned sorted.  Whe"
 #"n we apply"
) 0 0 22 29 1 #"\n"
0 0 17 3 81
(
 #";; the filter function, we are actually generating two new lists of "
 #"our own, and "
) 0 0 22 29 1 #"\n"
0 0 17 3 78
(
 #";; we are not affecting the given list.  Therefore, it is generative"
 #" recursion"
) 0 0 22 29 1 #"\n"
0 0 17 3 65
#";; because we are recursing on subparts of data that we generate."
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 15 #";; Exercise B.3"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 31 #";; (define (merge-sort a-list) "
0 0 22 29 1 #"\n"
0 0 17 3 59
#";;   (if (null? a-list)        ; only base case: empty list"
0 0 22 29 1 #"\n"
0 0 17 3 15 #";;       a-list"
0 0 22 29 1 #"\n"
0 0 17 3 39 #";;       (let ((c1 (even-half a-list)) "
0 0 22 29 1 #"\n"
0 0 17 3 38 #";;             (c2 (odd-half a-list)))"
0 0 22 29 1 #"\n"
0 0 17 3 44 #";;          (merge-in-order (merge-sort c1) "
0 0 22 29 1 #"\n"
0 0 17 3 47 #";;                          (merge-sort c2)))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 79
(
 #";; This code doesn't work because if the given input list is not nul"
 #"l, we never"
) 0 0 22 29 1 #"\n"
0 0 17 3 78
(
 #";; actually get down to a null list.  We only ever get down to lists"
 #" of length"
) 0 0 22 29 1 #"\n"
0 0 17 3 51 #";; one, which we can compare and put in order with "
0 0 22 29 1 #"\n"
0 0 17 3 75
(
 #";; (goes-before? (car alist) (car blist)).  Note that when do the me"
 #"rge in "
) 0 0 22 29 1 #"\n"
0 0 17 3 79
(
 #";; merge-sort by combining the two halves of the original list, ther"
 #"e is no way"
) 0 0 22 29 1 #"\n"
0 0 17 3 77
(
 #";; we can divide and conquer to get a list of length 0.  By dividing"
 #" the list"
) 0 0 22 29 1 #"\n"
0 0 17 3 79
(
 #";; into subgroups, we can get at minimum lists of length 1, so that "
 #"is why the "
) 0 0 22 29 1 #"\n"
0 0 17 3 76
(
 #";; 1 element base case is needed, as we will never reach the null li"
 #"st base "
) 0 0 22 29 1 #"\n"
0 0 17 3 42 #";; case for any input list besides (list)."
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 21 #";; Helper procedures:"
0 0 22 29 1 #"\n"
0 0 17 3 62
#";; insert-in-order: int list -> list-with-int-in-correct-place"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 15 #"insert-in-order"
0 0 22 3 1 #" "
0 0 14 3 10 #"new-result"
0 0 22 3 1 #" "
0 0 14 3 6 #"a-list"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 22 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 6 #"a-list"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 22 3 1 #" "
0 0 14 3 10 #"new-result"
0 0 22 3 1 #" "
0 0 14 3 6 #"a-list"
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (("
0 0 14 3 12 #"goes-before?"
0 0 22 3 1 #" "
0 0 14 3 10 #"new-result"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 6 #"a-list"
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 22 3 1 #" "
0 0 14 3 10 #"new-result"
0 0 22 3 1 #" "
0 0 14 3 6 #"a-list"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 6 #"a-list"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 15 #"insert-in-order"
0 0 22 3 1 #" "
0 0 14 3 10 #"new-result"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 6 #"a-list"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 37 #";; goes-before: int int -> [#t or #f]"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 12 #"goes-before?"
0 0 22 3 1 #" "
0 0 14 3 2 #"r1"
0 0 22 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 3 #") ("
0 0 14 3 1 #"<"
0 0 22 3 1 #" "
0 0 14 3 2 #"r1"
0 0 22 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 4 #"))  "
0 0 17 3 17 #"; ascending order"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 38 #";; The insertion sort function itself:"
0 0 22 29 1 #"\n"
0 0 17 3 38 #";; insertion-sort: list -> sorted-list"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 14 #"insertion-sort"
0 0 22 3 1 #" "
0 0 14 3 6 #"a-list"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 6 #"a-list"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 6 #"a-list"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 15 #"insert-in-order"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 6 #"a-list"
0 0 22 3 3 #") ("
0 0 14 3 14 #"insertion-sort"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 6 #"a-list"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 14 #"insertion-sort"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"9"
0 0 22 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 1 #" "
0 0 20 3 1 #"9"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 14 #"insertion-sort"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 2 #"19"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #" "
0 0 20 3 2 #"-2"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 2 #"-2"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #" "
0 0 20 3 2 #"19"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 14 #"insertion-sort"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 18 #";; Part C: Quoting"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 15 #";; Exercise C.1"
0 0 22 29 1 #"\n"
0 0 17 3 12 #";; SICP 2.55"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 22 #";; (car ''abracadabra)"
0 0 22 29 1 #"\n"
0 0 17 3 41 #";;   -> (car (quote (quote abracadabra)))"
0 0 22 29 1 #"\n"
0 0 17 3 35 #";;  Note that this is equivalnt to "
0 0 22 29 1 #"\n"
0 0 17 3 37 #";;      -> (car '(quote abracadabra))"
0 0 22 29 1 #"\n"
0 0 17 3 78
(
 #";;  Note that car of a quoted list simply returns the first symbol o"
 #"f the list"
) 0 0 22 29 1 #"\n"
0 0 17 3 19 #";;         -> quote"
0 0 22 29 1 #"\n"
0 0 17 3 64
#";; (which is equivalent to 'quote as printed in the interpreter)"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 15 #";; Exercise C.2"
0 0 22 29 1 #"\n"
0 0 17 3 12 #";; SICP 2.56"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 44 #";; exponentiation?: expression -> [#t or #f]"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 15 #"exponentiation?"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 2 #"**"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 69
(
 #";; expressions will be written in the form (** x y), representing x^"
 #"y"
) 0 0 22 29 1 #"\n"
0 0 17 3 60
#";; where the first item in the list is ** for exponentiation"
0 0 22 29 1 #"\n"
0 0 17 3 60
#";; the second item in the list is the base (2nd item = cadr)"
0 0 22 29 1 #"\n"
0 0 17 3 64
#";; the third item in the list is the exponent (3rd item = caddr)"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 26 #";; base: expression -> int"
0 0 22 29 1 #"\n"
0 0 17 3 63
#";;   (where expression is of the form (** x y) representing x^y"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 4 #"base"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 30 #";; exponent: expression -> int"
0 0 22 29 1 #"\n"
0 0 17 3 63
#";;   (where expression is of the form (** x y) representing x^y"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 8 #"exponent"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 3 #"car"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 45 #";; make-exponentiation: int int -> expression"
0 0 22 29 1 #"\n"
0 0 17 3 63
#";;   (where expression is of the form (** x y) representing x^y"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 19 #"make-exponentiation"
0 0 22 3 1 #" "
0 0 14 3 4 #"base"
0 0 22 3 1 #" "
0 0 14 3 8 #"exponent"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 22 3 3 #" (("
0 0 14 3 8 #"=number?"
0 0 22 3 1 #" "
0 0 14 3 8 #"exponent"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #") "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (("
0 0 14 3 8 #"=number?"
0 0 22 3 1 #" "
0 0 14 3 8 #"exponent"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #") "
0 0 14 3 4 #"base"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 22 3 1 #" "
0 0 14 3 4 #"base"
0 0 22 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 22 3 1 #" "
0 0 14 3 8 #"exponent"
0 0 22 3 4 #")) ("
0 0 14 3 4 #"expt"
0 0 22 3 1 #" "
0 0 14 3 4 #"base"
0 0 22 3 1 #" "
0 0 14 3 8 #"exponent"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"**"
0 0 22 3 1 #" "
0 0 14 3 4 #"base"
0 0 22 3 1 #" "
0 0 14 3 8 #"exponent"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 5 #"deriv"
0 0 22 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 2 #") "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 5 #"deriv"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 2 #") "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 5 #"deriv"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 2 #"**"
0 0 22 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 2 #") "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 5 #"deriv"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 2 #"**"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 2 #") "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 5 #"deriv"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 2 #"**"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 5 #"deriv"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 2 #"**"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #") "
0 0 20 3 1 #"3"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 2 #" ("
0 0 14 3 2 #"**"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #") "
0 0 20 3 1 #"2"
0 0 22 3 3 #")) "
0 0 20 3 1 #"3"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 5 #"deriv"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 2 #" ("
0 0 14 3 2 #"**"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 2 #" ("
0 0 14 3 2 #"**"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 4 #"))) "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 2 #" ("
0 0 14 3 2 #"**"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 5 #"))) ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 77
(
 #";;;; CODE FROM CHAPTER 2 OF STRUCTURE AND INTERPRETATION OF COMPUTER"
 #" PROGRAMS"
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 65
#";;; Examples from the book are commented out with ;; so that they"
0 0 22 29 1 #"\n"
0 0 17 3 73
(
 #";;;  are easy to find, and so that they will be omitted if you evalu"
 #"ate a"
) 0 0 22 29 1 #"\n"
0 0 17 3 70
(
 #";;;  chunk of the file (programs with intervening examples) in Schem"
 #"e."
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 17 #";;; SECTION 2.3.2"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 68
#";; derive: expression variable-to-differerniate-w.r.t. -> expression"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 5 #"deriv"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 22 3 3 #" (("
0 0 14 3 7 #"number?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #") "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (("
0 0 14 3 9 #"variable?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 14 #"same-variable?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 2 #") "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (("
0 0 14 3 4 #"sum?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 8 #"make-sum"
0 0 22 3 2 #" ("
0 0 14 3 5 #"deriv"
0 0 22 3 2 #" ("
0 0 14 3 6 #"addend"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #") "
0 0 14 3 3 #"var"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 20 #"                   ("
0 0 14 3 5 #"deriv"
0 0 22 3 2 #" ("
0 0 14 3 6 #"augend"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #") "
0 0 14 3 3 #"var"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (("
0 0 14 3 8 #"product?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 8 #"make-sum"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 12 #"make-product"
0 0 22 3 2 #" ("
0 0 14 3 10 #"multiplier"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 26 #"                         ("
0 0 14 3 5 #"deriv"
0 0 22 3 2 #" ("
0 0 14 3 12 #"multiplicand"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #") "
0 0 14 3 3 #"var"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 12 #"make-product"
0 0 22 3 2 #" ("
0 0 14 3 5 #"deriv"
0 0 22 3 2 #" ("
0 0 14 3 10 #"multiplier"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #") "
0 0 14 3 3 #"var"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 26 #"                         ("
0 0 14 3 12 #"multiplicand"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 17 3 62
#";; Added exponentiation implementation for derivative function"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (("
0 0 14 3 15 #"exponentiation?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 12 #"make-product"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 12 #"make-product"
0 0 22 3 2 #" ("
0 0 14 3 8 #"exponent"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 25 #"                        ("
0 0 14 3 19 #"make-exponentiation"
0 0 22 3 2 #" ("
0 0 14 3 4 #"base"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 46 #"                                             ("
0 0 14 3 8 #"make-sum"
0 0 22 3 2 #" ("
0 0 14 3 8 #"exponent"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #") "
0 0 20 3 2 #"-1"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 28 #"                            "
0 0 17 3 51 #";; take deriavative by decreasing the exponent by 1"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 5 #"deriv"
0 0 22 3 2 #" ("
0 0 14 3 4 #"base"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #") "
0 0 14 3 3 #"var"
0 0 22 3 4 #"))) "
0 0 17 3 13 #";; chain rule"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 34 #"\"unknown expression type -- DERIV\""
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 37 #";; representing algebraic expressions"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"variable?"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 3 #") ("
0 0 14 3 7 #"symbol?"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 14 #"same-variable?"
0 0 22 3 1 #" "
0 0 14 3 2 #"v1"
0 0 22 3 1 #" "
0 0 14 3 2 #"v2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 9 #"variable?"
0 0 22 3 1 #" "
0 0 14 3 2 #"v1"
0 0 22 3 3 #") ("
0 0 14 3 9 #"variable?"
0 0 22 3 1 #" "
0 0 14 3 2 #"v2"
0 0 22 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 14 3 2 #"v1"
0 0 22 3 1 #" "
0 0 14 3 2 #"v2"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 42 #";(define (make-sum a1 a2) (list '+ a1 a2))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 46 #";(define (make-product m1 m2) (list '* m1 m2))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 4 #"sum?"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 1 #"+"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 6 #"addend"
0 0 22 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 22 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 6 #"augend"
0 0 22 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 3 #") ("
0 0 14 3 5 #"caddr"
0 0 22 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 8 #"product?"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 14 3 1 #"*"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 10 #"multiplier"
0 0 22 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 22 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 12 #"multiplicand"
0 0 22 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 3 #") ("
0 0 14 3 5 #"caddr"
0 0 22 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 22 #";; With simplification"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 8 #"make-sum"
0 0 22 3 1 #" "
0 0 14 3 2 #"a1"
0 0 22 3 1 #" "
0 0 14 3 2 #"a2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 22 3 3 #" (("
0 0 14 3 8 #"=number?"
0 0 22 3 1 #" "
0 0 14 3 2 #"a1"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #") "
0 0 14 3 2 #"a2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (("
0 0 14 3 8 #"=number?"
0 0 22 3 1 #" "
0 0 14 3 2 #"a2"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #") "
0 0 14 3 2 #"a1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 22 3 1 #" "
0 0 14 3 2 #"a1"
0 0 22 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 22 3 1 #" "
0 0 14 3 2 #"a2"
0 0 22 3 4 #")) ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 2 #"a1"
0 0 22 3 1 #" "
0 0 14 3 2 #"a2"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 2 #"a1"
0 0 22 3 1 #" "
0 0 14 3 2 #"a2"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 8 #"=number?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #") ("
0 0 14 3 1 #"="
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 12 #"make-product"
0 0 22 3 1 #" "
0 0 14 3 2 #"m1"
0 0 22 3 1 #" "
0 0 14 3 2 #"m2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 22 3 3 #" (("
0 0 14 3 2 #"or"
0 0 22 3 2 #" ("
0 0 14 3 8 #"=number?"
0 0 22 3 1 #" "
0 0 14 3 2 #"m1"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #") ("
0 0 14 3 8 #"=number?"
0 0 22 3 1 #" "
0 0 14 3 2 #"m2"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")) "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (("
0 0 14 3 8 #"=number?"
0 0 22 3 1 #" "
0 0 14 3 2 #"m1"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #") "
0 0 14 3 2 #"m2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (("
0 0 14 3 8 #"=number?"
0 0 22 3 1 #" "
0 0 14 3 2 #"m2"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #") "
0 0 14 3 2 #"m1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 22 3 1 #" "
0 0 14 3 2 #"m1"
0 0 22 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 22 3 1 #" "
0 0 14 3 2 #"m2"
0 0 22 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 2 #"m1"
0 0 22 3 1 #" "
0 0 14 3 2 #"m2"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 2 #"m1"
0 0 22 3 1 #" "
0 0 14 3 2 #"m2"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 15 #"generate-report"
0 0 22 3 1 #")"
0           0
